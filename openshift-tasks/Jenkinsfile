#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      git url: 'https://github.com/nick363501/advdev_homework_da0a.git'
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // Variables for POM Version, Dev & Prod tags.

			def version = getVersionFromPom("pom.xml")
			def devTag  = "${version}-${BUILD_NUMBER}"
			def prodTag = "${version}"
      def nexusURL  = "http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
      def sonarURL = "http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000"
      def devProject = "da0a-tasks-dev"
      def prodProject = "da0a-taks-prod"

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests=true"
      }

      stage('Parallel'){
				parallel firstBranch: {
					stage('Unit Tests') {
						sh "${mvnCmd} test"
					}
				}, secondBranch: {
					stage('Code Analysis') {
					//	sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarURL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
					} 
				}
			}

      //Built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        echo "NEUX URL=${nexusURL}"
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusURL}"
      }


      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        // Build Image, tag Image
        script {
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              openshift.selector("bc", "tasks").startBuild("--from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${prodTag}/tasks-${prodTag}.war", "--wait=true")
              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {

        echo "Deploying container image to Development Project"
        sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/${GUID}-tasks-dev/tasks:${devTag} -n ${GUID}-tasks-dev"
				sh "oc set env dc/tasks VERSION='$devTag (tasks-dev)' -n $GUID-tasks-dev"
				sh "oc delete configmap tasks-config -n ${GUID}-tasks-dev --ignore-not-found=true"
				sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-tasks-dev"
		  
        // Verify service is running before proceeding
				openshiftDeploy depCfg: 'tasks', namespace: '${GUID}-tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
				openshiftVerifyDeployment depCfg: 'tasks', namespace: '${GUID}-tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
				openshiftVerifyService namespace: '${GUID}-tasks-dev', svcName: 'tasks', verbose: 'false'
      }

      // Pick up here

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${GUID}-tasks-dev/tasks:${devTag} docker://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"
				
        openshiftTag alias: 'false', destStream: 'tasks', destTag: prodTag, destinationNamespace: '${GUID}-tasks-dev', namespace: '$GUID}-tasks-dev', srcStream: 'tasks', srcTag: devTag, verbose: 'false'
			  } 
      

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}